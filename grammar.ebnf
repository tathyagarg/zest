(*
  The contents of this file define the grammar of the Zircon programming language,
  in the Extended Backus-Naur Form* defined in ISO/IEC 14977:1996, accessible through:
    https://www.cl.cam.ac.uk/~mgk25/iso-14977.pdf

  *: The EBNF form defines `Â´` as a character used to define the start of a string.
     Instead, I am using `'` (it's easier to type)
*)

(* Basic Definitions *)
letter
= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h'
| 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p'
| 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'
| 'y' | 'z'
| 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H'
| 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P'
| 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'
| 'Y' | 'Z';

decimal digit
= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7'
| '8' | '9';

(* Expressions *)
(* 
  Operator precedence in Zircon is identical to the operator precedence in Zig:
    https://ziglang.org/documentation/master/#Precedence

  I might have played around with some of the actual operators, though.
*)
expression = '{', statements, '}', '(', expression, ')' | precedence_1;
statements = {expression, ';'};

precedence_1 = function_call | indexing | attribute | pointer_dereference | optional_unwrap
             | precedence_2;

function_call = expression, '(', {expression} ,')';

indexing = expression, '(', [slice] ,')';
slice = expression | expression, '..', [expression];

attribute = expression, '.', expression;

pointer_dereference = expression, '.*';
optional_unwrap = expression, '.?';

precedence_2 = error_union | precedence_3;

error_union = expression, '!', expression;

precedence_3 = array_type | precedence_4;

array_type = expression, '{}';

precedence_4 = boolean_not | negation | wrapping_negation | bitwise_not | reference | optional_definition
             | precedence_5;

boolean_not = '!', expression;
negation = '-', expression;
wrapping_negation = '-%', expression;
bitwise_not = '~', expression;
reference = '&', expression;
optional_definition = '?', expression;

precedence_5 = multiplication | division | remainder | array_multiplication | wrapping_multiplication | saturating_multiplication | error_set_merge
             | precedence_6;

multiplication = expression, '*', expression;
division = expression, '/', expression;
remainder = expression, '%', expression;
array_multiplication = expression, '**', expression;
wrapping_multiplication = expression, '*%', expression;
saturating_multiplication = expression, '*|', expression;
error_set_merge = expression, '||', expression;

precedence_6 = addition | subtraction | concatenation | wrapping_addition | wrapping_subtraction | saturating_addition | saturating_subtraction
             | precedence_7;

addition = expression, '+', expression;
subtraction = expression, '-', expression;
concatenation = expression, '++', expression;
wrapping_addition = expression, '+%', expression;
wrapping_subtraction = expression, '-%', expression;
saturating_addition = expression, '+|', expression;
saturating_subtraction = expression, '-|', expression;

precedence_7 = bitshift_right | bitshift_left | saturating_bitshift_left
             | precedence_8;

bitshift_right = expression, '>>', expression;
bitshift_left = expression, '<<', expression;
saturating_bitshift_left = expression, '<<|', expression;

precedence_8 = bitwise_and | bitwise_or | bitwise_xor | orelse | catch
             | precedence_9;

bitwise_and = expression, '&', expression;
bitwise_or = expression, '|', expression;
bitwise_xor = expression, '^', expression;
orelse = expression, 'orelse', expression;
catch = expression, 'catch', ['|', expression, '|'], expression;

precedence_9 = equality | inequality | less_than | greater_than | less_than_equal_to | greater_than_equal_to
             | precedence_10;

equality = expression, '==', expression;
inequality = expression, '!=', expression;
less_than = expression, '<', expression;
greater_than = expression, '>', expression;
less_than_equal_to = expression, '<=', expression;
greater_than_equal_to = expression, '>=', expression;

precedence_10 = and | precedence_11;

and = expression, 'and', expression;

precedence_11 = or | precedence_12;

or = expression, 'or', expression;

precedence_12 = assignment | mul_assign | wrapping_mul_assign | saturating_mul_assign | div_assign 
              | rem_assign | add_assign | wrapping_add_assign | saturating_add_assign | bsr_assign
              | xor_assign | sub_assign | wrapping_sub_assign | saturating_sub_assign | or_assign
              | and_assign | bsl_assign | saturating_bsl_assign
              | atom;

assignment = identifier | pointer_dereference, '=', expression;
mul_assign = identifier | pointer_dereference, '*=', expression;
wrapping_mul_assign = identifier | pointer_dereference, '*%=', expression;
saturating_mul_assign = identifier | pointer_dereference, '*|=', expression;
div_assign = identifier | pointer_dereference, '/=', expression;
rem_assign = identifier | pointer_dereference, '%=', expression;

add_assign = identifier | pointer_dereference, '+=', expression;
wrapping_add_assign = identifier | pointer_dereference, '+%=', expression;
saturating_add_assign = identifier | pointer_dereference, '+|=', expression;

sub_assign = identifier | pointer_dereference, '-=', expression;
wrapping_sub_assign = identifier | pointer_dereference, '-%=', expression;
saturating_sub_assign = identifier | pointer_dereference, '-|=', expression;

bsr_assign = identifier | pointer_dereference, '>>=', expression;
bsl_assign = identifier | pointer_dereference, '<<=', expression;
saturating_bsl_assign = identifier | pointer_dereference, '<<|=', expression;

xor_assign = identifier | pointer_dereference, '^=', expression;
or_assign = identifier | pointer_dereference, '|=', expression;
and_assign = identifier | pointer_dereference, '&=', expression;

atom = identifier | 'true' | 'false' | 'null' | anonymous_struct

